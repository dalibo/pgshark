#!/usr/bin/perl
# This program is open source, licensed under the simplified BSD license.
# For license terms, see the LICENSE file.

use strict;
use warnings;
use Getopt::Long;
use Pod::Usage;
use POSIX;
use pgShark;

BEGIN {

    # set the DEBUG constant to 0 or 1
    # When 0, optimize away all debug messages at compile time
    eval q{
        $ENV{'DEBUG'} = 0
            unless defined $ENV{'DEBUG'} and $ENV{'DEBUG'};
        use constant DEBUG => $ENV{'DEBUG'};
    };
}

my $shark;

my %procs;
my %sessions;
my @format_keys;
my $track_session = 0;
my $format        = "Packet: t=%T, session=%k\nPGSQL: type=%M, %>\n%@\n";
my %args          = (
    'help'      => 0,
    'debug'     => 0,
    'interface' => '',
    'host'      => undef,
    'port'      => 5432,
    'read'      => [],
    '2'         => 0,
    '3'         => 0,
    'include'   => [],
    'exclude'   => [],
    'format'    => ''
);

#log_output
# behave like printf.
# Computes and prints the data using the given format
# @param $frmt
# @param $pg_msg
# @params vars, ...
sub log_output {
    my $pg_msg = shift;
    my $frmt   = shift;
    my $output = $format;

    $pg_msg->{'debug-data'} = sprintf $frmt, @_;

    foreach my $sub (@format_keys) {
        $sub->( \$output, $pg_msg );
    }

    print "$output\n";
}

#code_reponse
# Prints code and message of each fields from a error or notice message
sub code_response {
    my $pg_msg = shift;
    my $data   = '';

    foreach my $code ( keys %{ $pg_msg->{'fields'} } ) {
        my $value = $pg_msg->{'fields'}->{$code};
        SWITCH: {

            #S C M D H P p q W F L R
            if ( $code eq 'S' ) {
                $data .= "  Severity: '$value'\n";
                last SWITCH;
            }
            if ( $code eq 'C' ) {
                $data .= "  Code: '$value'\n";
                last SWITCH;
            }
            if ( $code eq 'M' ) {
                $data .= "  Message: '$value'\n";
                last SWITCH;
            }
            if ( $code eq 'D' ) {
                $data .= "  Detail: '$value'\n";
                last SWITCH;
            }
            if ( $code eq 'H' ) {
                $data .= "  Hint: '$value'\n";
                last SWITCH;
            }
            if ( $code eq 'P' ) {
                $data .= "  Position: '$value'\n";
                last SWITCH;
            }
            if ( $code eq 'p' ) {
                $data .= "  Internal position: '$value'\n";
                last SWITCH;
            }
            if ( $code eq 'q' ) {
                $data .= "  Internal query: '$value'\n";
                last SWITCH;
            }
            if ( $code eq 'W' ) {
                $data .= "  Where: '$value'\n";
                last SWITCH;
            }
            if ( $code eq 'F' ) {
                $data .= "  File: '$value'\n";
                last SWITCH;
            }
            if ( $code eq 'L' ) {
                $data .= "  Line: '$value'\n";
                last SWITCH;
            }
            if ( $code eq 'R' ) {
                $data .= "  Routine: '$value'\n";
                last SWITCH;
            }
        }
    }

    return $data;
}

sub Authentication {
    my $pg_msg = shift;
    my $data = "AUTHENTIFICATION REQUEST code=$pg_msg->{'code'} ";

SWITCH: {
        if ( $pg_msg->{'code'} == 0 ) {
            $data .= "(SUCCESS)";
            last SWITCH;
        }
        if ( $pg_msg->{'code'} == 2 ) {
            $data .= "(Kerberos V5)";
            last SWITCH;
        }
        if ( $pg_msg->{'code'} == 3 ) {
            $data .= "(clear-text password)";
            last SWITCH;
        }
        if ( $pg_msg->{'code'} == 5 ) {
            $data .= sprintf "(MD5 salt='%s')",
                unpack( 'h*', $pg_msg->{'salt'} );
            last SWITCH;
        }
        if ( $pg_msg->{'code'} == 6 ) {
            $data .= "(SCM)";
            last SWITCH;
        }
        if ( $pg_msg->{'code'} == 7 ) {
            $data .= "(GSSAPI)";
            last SWITCH;
        }
        if ( $pg_msg->{'code'} == 9 ) {
            $data .= "(SSPI)";
            last SWITCH;
        }
        if ( $pg_msg->{'code'} == 8 ) {
            $data .= "(contains GSSAPI or SSPI data)";
            last SWITCH;
        }
        if ( $pg_msg->{'code'} == 10 ) {
            $data .= sprintf "(SASL mechanism: %s)",
                $pg_msg->{'name'};
            last SWITCH;
        }
        if ( $pg_msg->{'code'} == 11 ) {
            $data .= "(contains SASL challenge)";
            last SWITCH;
        }
        if ( $pg_msg->{'code'} == 12 ) {
            $data .= "(contains SASL additional data)";
            last SWITCH;
        }
    }

    log_output($pg_msg, $data);
}

sub BackendKeyData {
    my $pg_msg = shift;

    log_output( $pg_msg, "BACKEND KEY DATA pid=%d, key=%d",
        $pg_msg->{'pid'}, $pg_msg->{'key'}
    );
}

sub Bind {
    my $pg_msg = shift;

    map { $_ = 'NULL' if not defined } @{ $pg_msg->{'params'} };

    log_output( $pg_msg,
        "BIND portal='%s', name='%s', num_formats=%d, formats=%s, num_params=%d, params=%s",
        $pg_msg->{'portal'}, $pg_msg->{'name'}, $pg_msg->{'num_formats'},
        join( ', ', @{ $pg_msg->{'params_types'} } ),
        $pg_msg->{'num_params'}, join( ', ', @{ $pg_msg->{'params'} } )
    );
}

sub BindComplete {
    my $pg_msg = shift;

    log_output( $pg_msg, "BIND COMPLETE" );
}

sub CancelRequest {
    my $pg_msg = shift;

    log_output( $pg_msg, "CANCEL REQUEST pid=%s, key=%s", $pg_msg->{'pid'},
        $pg_msg->{'key'}
    );
}

sub Close {
    my $pg_msg = shift;

    log_output( $pg_msg, "CLOSE kind='%s', name='%s'", $pg_msg->{'kind'},
        $pg_msg->{'name'}
    );
}

sub CloseComplete {
    my $pg_msg = shift;

    log_output( $pg_msg, "CLOSE COMPLETE" );
}

sub CommandComplete {
    my $pg_msg = shift;

    log_output( $pg_msg, "COMMAND COMPLETE command='%s'",
        $pg_msg->{'command'}
    );
}

sub CopyBothResponse {
    my $pg_msg = shift;

    log_output( $pg_msg,
        "COPY BOTH RESPONSE copy format=%d, num_fields=%d, fields_formats=%s",
        $pg_msg->{'copy_format'}, $pg_msg->{'num_fields'},
        join( ', ', @{ $pg_msg->{'fields_formats'} } )
    );
}

sub CopyData {
    my $pg_msg = shift;

    log_output( $pg_msg, "COPY DATA len=%d", length( $pg_msg->{'row'} ) );
}

sub CopyDone {
    my $pg_msg = shift;


    log_output( $pg_msg, "COPY DONE" );
}

sub CopyFail {
    my $pg_msg = shift;

    log_output( $pg_msg, "COPY FAIL error='%s'", $pg_msg->{'error'} );
}

sub CopyInResponse {
    my $pg_msg = shift;

    log_output( $pg_msg,
        "COPY IN RESPONSE copy format=%d, num_fields=%d, fields_formats=%s",
        $pg_msg->{'copy_format'}, $pg_msg->{'num_fields'},
        join( ', ', @{ $pg_msg->{'fields_formats'} } )
    );
}

sub CopyOutResponse {
    my $pg_msg = shift;

    log_output( $pg_msg,
        "COPY OUT RESPONSE copy format=%d, num_fields=%d, fields_formats=%s",
        $pg_msg->{'copy_format'}, $pg_msg->{'num_fields'},
        join( ', ', @{ $pg_msg->{'fields_formats'} } )
    );
}

sub CursorResponse {
    my $pg_msg = shift;

    log_output( $pg_msg, "CURSOR RESPONSE name='%s'", $pg_msg->{'name'} );
}

sub DataRow {
    my $pg_msg = shift;
    my $i      = 0;
    my $data   = "DATA ROW num_values=$pg_msg->{'num_values'}\n";
    my @rows;

    for my $value ( @{ $pg_msg->{'values'} } ) {
        $i++;
        if ( defined $value->[1] ) {
            $value->[1] =~ tr/\x00-\x1F\x80-\xFF/./;
            $value->[1] = "'$value->[1]'";
        }
        else {
            $value->[1] = 'NULL';
        }
        push @rows, $i, @$value;
    }

    log_output( $pg_msg,
                "DATA ROW num_values=%d\n".
                "  ---[Value %04d]---\n  length=%d\n  value=%s\n" x $i,
                $pg_msg->{'num_values'},
                @rows );
}

sub Describe {
    my $pg_msg = shift;

    log_output( $pg_msg, "DESCRIBE kind='%s', name='%s'", $pg_msg->{'kind'},
        $pg_msg->{'name'}
    );
}

sub EmptyQueryResponse {
    my $pg_msg = shift;

    log_output( $pg_msg, "EMPTY QUERY RESPONSE" );
}

sub ErrorResponse {
    my $pg_msg = shift;

    log_output( $pg_msg, "ERROR RESPONSE\n%s", code_response( $pg_msg ) );
}

sub Execute {
    my $pg_msg = shift;

    log_output( $pg_msg, "EXECUTE name='%s', nb_rows=%d", $pg_msg->{'name'},
        $pg_msg->{'nb_rows'}
    );
}

sub Flush {
    my $pg_msg = shift;

    log_output( $pg_msg, "FLUSH" );
}

sub GSSENCRequest {
    my $pg_msg = shift;

    log_output( $pg_msg, "GSSAPI ENCRYPTION REQUEST" );
}

sub GSSResponse {
    my $pg_msg = shift;

    log_output( $pg_msg, "GSSAPI/SSPI RESPONSE" );
}

sub HotStandbyFeedback {
    my $pg_msg = shift;

    log_output( $pg_msg,
        "HOT-STANDBY FEEDBACK ts=%s, xmin=%s, xmin_epoch=%s, catalog_xmin=%s, catalog_xmin_epoch=%s",
        $pg_msg->{'ts'}, $pg_msg->{'xmin'}, $pg_msg->{'xmin_epoch'},
        $pg_msg->{'catalog_xmin'}, $pg_msg->{'catalog_xmin_epoch'}
    );
}

sub NoData {
    my $pg_msg = shift;

    log_output( $pg_msg, "NO DATA" );
}

sub NoticeResponse {
    my $pg_msg = shift;

    log_output( $pg_msg, "NOTICE RESPONSE\n%s", code_response($pg_msg) );
}

sub NegotiateProtocolVersion {
    my $pg_msg = shift;

    log_output( $pg_msg, "NEGOTIATE PROTOCOL VERSION minor=%d, unknowns=%s",
        $pg_msg->{'minor'}, join( ', ', @{ $pg_msg->{'unknowns'} } )
    );
}

sub NotificationResponse {
    my $pg_msg = shift;

    log_output( $pg_msg,
        "NOTIFICATION RESPONSE pid=%d, channel='%s', payload='%s'",
        $pg_msg->{'pid'}, $pg_msg->{'channel'}, $pg_msg->{'payload'}
    );
}

sub ParameterDescription {
    my $pg_msg = shift;

    log_output( $pg_msg, "PARAMETER DESCRIPTION: num_param=%d, params_oids=%s",
        $pg_msg->{'num_params'}, join( ', ', @{ $pg_msg->{'params_types'} } )
    );
}

sub ParameterStatus {
    my $pg_msg = shift;

    log_output( $pg_msg, "PARAMETER STATUS name='%s', value='%s'",
        $pg_msg->{'name'}, $pg_msg->{'value'}
    );
}

sub Parse {
    my $pg_msg = shift;

    log_output( $pg_msg,
        "PARSE name='%s', num_params=%d, params_type=%s, query=%s",
        $pg_msg->{'name'}, $pg_msg->{'num_params'},
        join( ', ', @{ $pg_msg->{'params_types'} } ), $pg_msg->{'query'}
    );
}

sub ParseComplete {
    my $pg_msg = shift;

    log_output( $pg_msg, "PARSE COMPLETE" );
}

sub PasswordMessage {
    my $pg_msg = shift;

    log_output( $pg_msg, "PASSWORD MESSAGE password=%s",
        $pg_msg->{'password'}
    );
}

sub PortalSuspended {
    my $pg_msg = shift;

    log_output( $pg_msg, "PORTAL SUSPENDED" );
}

sub PrimaryKeepalive {
    my $pg_msg = shift;

    log_output( $pg_msg, "PRIMARY KEEPALIVE: lsn=%s ts=%s ping=%s",
        $pg_msg->{'lsn'}, $pg_msg->{'ts'}, $pg_msg->{'ping'});
}

sub Query {
    my $pg_msg = shift;

    log_output( $pg_msg, "QUERY query=%s", $pg_msg->{'query'} );
}

sub ReadyForQuery {
    my $pg_msg = shift;

    $pg_msg->{'status'} = '?' if not defined $pg_msg->{'status'};

    if ( $pg_msg->{'status'} eq 'I' ) {
        log_output( $pg_msg, "READY FOR QUERY type=<IDLE>" );
    }
    elsif ( $pg_msg->{'status'} eq 'T' ) {
        log_output( $pg_msg, "READY FOR QUERY type=<IDLE> in transaction" );
    }
    elsif ( $pg_msg->{'status'} eq 'E' ) {
        log_output( $pg_msg, "READY FOR QUERY type=<IDLE> in transaction (aborted)" );
    }
    else {
        # protocol v2 has no status
        log_output( $pg_msg, "READY FOR QUERY" );
    }
}

sub RowDescription {
    my $pg_msg = shift;
    my $i      = 0;
    my $data   = "ROW DESCRIPTION: num_fields=$pg_msg->{'num_fields'}\n";

    for my $field ( @{ $pg_msg->{'fields'} } ) {
        $i++;
        $data .= sprintf
            "  ---[Field %02d]---\n  name='%s'\n  type=%d\n  type_len=%d\n  type_mod=%d\n",
            $i, $field->[0], $field->[3], $field->[4], $field->[5];

        $data .= sprintf( "  relid=%d\n  attnum=%d\n  format=%d\n",
            $field->[1], $field->[2], $field->[6] )
            if defined $field->[1];
    }
    log_output( $pg_msg, $data );
}

sub SASLInitialResponse {
    my $pg_msg = shift;

    log_output( $pg_msg, "SASL INIT RESPONSE: mechanism=%s", $pg_msg->{'name'} );
}

sub SASLResponse {
    my $pg_msg = shift;

    log_output( $pg_msg, "SASL RESPONSE" );
}

sub SSLAnswer {
    my $pg_msg = shift;

    log_output( $pg_msg, "SSL BACKEND ANSWER: %s", $pg_msg->{'ssl_answer'} );
}

sub SSLRequest {
    my $pg_msg = shift;

    log_output( $pg_msg, "SSL REQUEST" );
}

sub StandbyStatusUpdate {
    my $pg_msg = shift;

    log_output( $pg_msg,
        "STANDBY STATUS UPDATE: written=%s flushed=%s applied=%s ts=%s ping=%s",
        $pg_msg->{'written'}, $pg_msg->{'flushed'}, $pg_msg->{'applied'},
        $pg_msg->{'ts'}, $pg_msg->{'ping'}
    );
}

sub StartupMessage {
    my $pg_msg = shift;
    my $i      = 0;
    my $data   = "STARTUP MESSAGE version: $pg_msg->{'version'}\n";

    foreach my $param ( keys %{ $pg_msg->{'params'} } ) {
        $data .= "  $param=$pg_msg->{'params'}{$param}\n";

        $sessions{$pg_msg->{'sess_hash'}}{$param} = $pg_msg->{'params'}{$param}
            if $track_session and $param =~ /application_name|database|user/;
    }

    log_output( $pg_msg, $data);
}

sub Sync {
    my $pg_msg = shift;

    log_output( $pg_msg, "SYNC" );
}

sub Terminate {
    my $pg_msg = shift;

    delete $sessions{$pg_msg->{'sess_hash'}};

    log_output( $pg_msg, "DISCONNECT" );
}

# Logical replication

sub Begin {
    my $pg_msg = shift;
    my $data   = sprintf "BEGIN xact_end_lsn=%s, xact_ts=%s, xid=%s",
        $pg_msg->{'xact_end_lsn'}, $pg_msg->{'xact_ts'}, $pg_msg->{'xid'};

    XLogData( $pg_msg, $data );
}

sub Commit {
    my $pg_msg = shift;
    my $data   = sprintf "COMMIT flag=%d, xact_lsn=%s, xact_lsn_end=%s, xact_ts=%s",
        $pg_msg->{'flag'}, $pg_msg->{'xact_lsn'}, $pg_msg->{'xact_lsn_end'},
        $pg_msg->{'xact_ts'};

    XLogData( $pg_msg, $data );
}

sub Origin {
    my $pg_msg = shift;

    log_output( $pg_msg, "ORIGIN");
}

sub Relation {
    my $pg_msg = shift;
    my $i      = 0;
    my $data   = sprintf "RELATION relid=%d, nspname=%s, relname=%s, ident=%c\n",
        $pg_msg->{'relid'}, $pg_msg->{'nspname'}, $pg_msg->{'relname'},
        $pg_msg->{'relident'};

    for my $field ( @{ $pg_msg->{'cols'} } ) {
        $i++;
        $data .= sprintf
            "  ---[Field %02d]---\n  in key=%d\n  attrname=%s\n  typid=%d\n  typmod=%d\n",
            $i, $field->[0], $field->[1], $field->[2], $field->[3];
    }

    XLogData( $pg_msg, $data );
}

sub Type {
    my $pg_msg = shift;
    my $data   = sprintf "TYPE typid=%d, nspname=%s, typname=%s",
        $pg_msg->{'typid'}, $pg_msg->{'nspname'}, $pg_msg->{'typname'};

    XLogData( $pg_msg, $data );
}

sub Insert {
    my $pg_msg  = shift;
    my $data    = sprintf "INSERT relid=%d\n", $pg_msg->{'relid'};
    my ($k, $v) = each %{ $pg_msg->{'tup'} };

    $data .= sprintf "  record: ident=%s, #cols=%d\n", $k, scalar @{ $v };

    foreach my $r ( @{ $v } ) {
        if ($r->[0] eq 't') {
            $data .= sprintf "    field: kind=%s, data len=%d\n",
                $r->[0], length $r->[1];
        }
        else {
            $data .= sprintf "    field: kind=%s\n", $r->[0];
        }
    }

    XLogData( $pg_msg, $data );
}

sub Update {
    my $pg_msg = shift;
    my $data   = sprintf "UPDATE relid=%d\n", $pg_msg->{'relid'};

    foreach my $t ( keys %{$pg_msg->{'tup'}} ) {
        $data .= sprintf "  record: ident=%s, #cols=%d\n", $t,
            scalar @{ $pg_msg->{'tup'}{$t} };
        foreach my $r ( @{ $pg_msg->{'tup'}{$t} } ) {
            if ($r->[0] eq 't') {
                $data .= sprintf "    field: kind=%s, data len=%d\n",
                    $r->[0], length $r->[1];
            }
            else {
                $data .= sprintf "    field: kind=%s\n", $r->[0];
            }
        }
    }

    XLogData( $pg_msg, $data );
}

sub Delete {
    my $pg_msg = shift;
    my $data   = sprintf "DELETE relid=%d\n", $pg_msg->{'relid'};
    my ($kind, $tup) = each %{ $pg_msg->{'tup'} };

    $data .= sprintf "  record: ident=%s, #cols=%d\n", $kind, scalar @{ $tup };
    foreach my $r ( @{ $tup } ) {
        if ($r->[0] eq 't') {
            $data .= sprintf "    field: kind=%s, data len=%d\n",
                $r->[0], length $r->[1];
        }
        else {
            $data .= sprintf "    field: kind=%s\n", $r->[0];
        }
    }

    XLogData( $pg_msg, $data );
}

sub Truncate {
    my $pg_msg = shift;
    my $data   = sprintf "TRUNCATE cascade=%d, restart=%d, relations=%s",
        $pg_msg->{'cascade'}, $pg_msg->{'restart'}, join(',', @{ $pg_msg->{'relid'} });

    XLogData( $pg_msg, $data );
}

sub XLogData {
    my $pg_msg = shift;
    my $data = "\n  $_[0]" // '';

    log_output( $pg_msg, "XLOG DATA lsn=%s, curr_lsn=%s, curr_ts=%s" . $data,
        $pg_msg->{'lsn'}, $pg_msg->{'current_lsn'}, $pg_msg->{'current_ts'}
    );
}

Getopt::Long::Configure('bundling');
GetOptions(
    \%args, qw{
        help
        debug|d+
        interface|i=s
        host|h=s
        port|p=s
        read|r=s
        include=s
        exclude=s
        format=s
        2+
        3+
        }
) or pod2usage( -exitval => 2 );

pod2usage( -verbose => 2 ) if $args{'help'};

pod2usage(
    -message => "Options -2 and -3 are mutal exclusives.\n",
    -exitval => 1
) if $args{'2'} and $args{'3'};

pod2usage(
    -message => "Arguments --interface and --read are incompatible.\n"
        . "Either listen from the network or open a pcap file.",
    -exitval => 1
) if $args{'interface'} ne '' and scalar @{ $args{'read'} } > 0;

$args{'protocol'} = $args{'2'} ? 2 : 3;

%procs = (
    'AuthenticationOk'                => \&Authentication,
    'AuthenticationKerberosV5'        => \&Authentication,
    'AuthenticationCleartextPassword' => \&Authentication,
    'AuthenticationCryptPassword'     => \&Authentication,
    'AuthenticationMD5Password'       => \&Authentication,
    'AuthenticationSCMCredential'     => \&Authentication,
    'AuthenticationGSS'               => \&Authentication,
    'AuthenticationSSPI'              => \&Authentication,
    'AuthenticationGSSContinue'       => \&Authentication,
    'AuthenticationSASL'              => \&Authentication,
    'AuthenticationSASLContinue'      => \&Authentication,
    'AuthenticationSASLFinal'         => \&Authentication,
    'BackendKeyData'                  => \&BackendKeyData,
    'Begin'                           => \&Begin,
    'Bind'                            => \&Bind,
    'BindComplete'                    => \&BindComplete,
    'CancelRequest'                   => \&CancelRequest,
    'Close'                           => \&Close,
    'CloseComplete'                   => \&CloseComplete,
    'CommandComplete'                 => \&CommandComplete,
    'Commit'                          => \&Commit,
    'CopyBothResponse'                => \&CopyBothResponse,
    'CopyData'                        => \&CopyData,
    'CopyDone'                        => \&CopyDone,
    'CopyFail'                        => \&CopyFail,
    'CopyInResponse'                  => \&CopyInResponse,
    'CopyOutResponse'                 => \&CopyOutResponse,
    'CursorResponse'                  => \&CursorResponse,
    'DataRow'                         => \&DataRow,
    'Delete'                          => \&Delete,
    'Describe'                        => \&Describe,
    'EmptyQueryResponse'              => \&EmptyQueryResponse,
    'ErrorResponse'                   => \&ErrorResponse,
    'Execute'                         => \&Execute,
    'Flush'                           => \&Flush,
    # 'FunctionCall' => sub {},
    # 'FunctionCallResponse' => sub {},
    'GSSENCRequest'            => \&GSSENCRequest,
    'GSSResponse'              => \&GSSResponse,
    'HotStandbyFeedback'       => \&HotStandbyFeedback,
    'Insert'                   => \&Insert,
    'NegotiateProtocolVersion' => \&NegotiateProtocolVersion,
    'NoData'                   => \&NoData,
    'NoticeResponse'           => \&NoticeResponse,
    'NotificationResponse'     => \&NotificationResponse,
    'Origin'                   => \&Origin,
    'ParameterDescription'     => \&ParameterDescription,
    'ParameterStatus'          => \&ParameterStatus,
    'Parse'                    => \&Parse,
    'ParseComplete'            => \&ParseComplete,
    'PasswordMessage'          => \&PasswordMessage,
    'PortalSuspended'          => \&PortalSuspended,
    'PrimaryKeepalive'         => \&PrimaryKeepalive,
    'Query'                    => \&Query,
    'ReadyForQuery'            => \&ReadyForQuery,
    'Relation'                 => \&Relation,
    'RowDescription'           => \&RowDescription,
    'SASLInitialResponse'      => \&SASLInitialResponse,
    'SASLResponse'             => \&SASLResponse,
    'SSLAnswer'                => \&SSLAnswer,
    'SSLRequest'               => \&SSLRequest,
    'StandbyStatusUpdate'      => \&StandbyStatusUpdate,
    'StartupMessage'           => \&StartupMessage,
    'Sync'                     => \&Sync,
    'Terminate'                => \&Terminate,
    'Truncate'                 => \&Truncate,
    'Type'                     => \&Type,
    'Update'                   => \&Update,
    'XLogData'                 => \&XLogData
);

if ( scalar @{ $args{'exclude'} } ) {
    for my $t ( @{ $args{'exclude'} } ) {
        delete $procs{ $t };
    }
}

if ( scalar @{ $args{'include'} } ) {
    for my $t ( keys %procs ) {
        next if grep { $t eq $_ } @{ $args{'include'} };
        delete $procs{ $t };
    }
}


$format = $args{'format'} unless $args{'format'} eq '';

# prepare/compile output
if ( $format =~ /%[aduHhkLMPRrTt>]/ ) {

    my $re_a    = qr/%a/;
    my $re_d    = qr/%d/;
    my $re_h    = qr/%h/;
    my $re_H    = qr/%H/;
    my $re_k    = qr/%k/;
    my $re_L    = qr/%L/;
    my $re_M    = qr/%M/;
    my $re_P    = qr/%P/;
    my $re_R    = qr/%R/;
    my $re_r    = qr/%r/;
    my $re_T    = qr/%T/;
    my $re_t    = qr/%t/;
    my $re_u    = qr/%u/;
    my $re_dir  = qr/%>/;
    my $re_data = qr/%@/;

    push @format_keys, sub {
            my $src_ip = pgShark::dec2dot( $_[1]->{'tcpip'}->{'src_ip'} );
            ${ $_[0] } =~ s/$re_H/$src_ip/g;
        }
        if $format =~ $re_H;

    push @format_keys, sub {
            my $dest_ip = pgShark::dec2dot( $_[1]->{'tcpip'}->{'dest_ip'} );
            ${ $_[0] } =~ s/$re_h/$dest_ip/g;
        }
        if $format =~ $re_h;

    push @format_keys, sub {
            ${ $_[0] } =~ s/$re_k/$_[1]->{'sess_hash'}/g;
        }
        if $format =~ $re_k;

    push @format_keys, sub {
            ${ $_[0] } =~ s/$re_L/length($_[1]->{'data'})/gex;
        }
        if $format =~ $re_L;

    push @format_keys, sub {
            ${ $_[0] } =~ s/$re_M/$_[1]->{'type'}/g;
        }
        if $format =~ $re_M;

    push @format_keys, sub {
            ${ $_[0] } =~ s/$re_P/$_[1]->{'tcpip'}{'pkt'}/g;
        }
        if $format =~ $re_P;

    push @format_keys, sub {
            my $src_ip   = pgShark::dec2dot( $_[1]->{'tcpip'}->{'src_ip'} );
            my $src_port = $_[1]->{'tcpip'}->{'src_port'};
            ${ $_[0] } =~ s/$re_R/$src_ip:$src_port/g;
        }
        if $format =~ $re_R;

    push @format_keys, sub {
            my $dest_ip   = pgShark::dec2dot( $_[1]->{'tcpip'}->{'dest_ip'} );
            my $dest_port = $_[1]->{'tcpip'}->{'dest_port'};
            ${ $_[0] } =~ s/$re_r/$dest_ip:$dest_port/g;
        }
        if $format =~ $re_r;

    push @format_keys, sub {
            ${ $_[0] } =~ s/$re_T/$_[1]->{'timestamp'}/g;
        }
        if $format =~ $re_T;

    push @format_keys, sub {
            ${ $_[0] } =~ s
                /$re_t
                /strftime('%Y-%m-%d %H:%M:%S %Z', localtime $_[1]->{'timestamp'})
                /gex;
        }
        if $format =~ $re_t;

    push @format_keys, sub {
            my $dir;
            if ( $_[1]->{'from'} eq 'B' ) {
                $dir = "B -> F";
            }
            else {
                $dir = "F -> B";
            }
            ${ $_[0] } =~ s/$re_dir/$dir/g;
        }
        if $format =~ $re_dir;

    push @format_keys, sub {
            ${ $_[0] } =~ s/$re_data/$_[1]->{'debug-data'}/g;
        }
        if $format =~ $re_data;

    if ( $format =~ $re_a ) {
        $track_session = 1;
        push @format_keys, sub {
            return ${ $_[0] } =~ s/$re_a//
                unless defined $sessions{$_[1]->{'sess_hash'}};
            ${ $_[0] } =~ s/$re_a/$sessions{$_[1]->{'sess_hash'}}{'application_name'}/g;
        }
    }

    if ( $format =~ $re_d ) {
        $track_session = 1;
        push @format_keys, sub {
            return ${ $_[0] } =~ s/$re_d//
                unless defined $sessions{$_[1]->{'sess_hash'}};
            ${ $_[0] } =~ s/$re_d/$sessions{$_[1]->{'sess_hash'}}{'database'}/g;
        }
    }

    if ( $format =~ $re_u ) {
        $track_session = 1;
        push @format_keys, sub {
            return ${ $_[0] } =~ s/$re_u//
                unless defined $sessions{$_[1]->{'sess_hash'}};
            ${ $_[0] } =~ s/$re_u/$sessions{$_[1]->{'sess_hash'}}{'user'}/g;
        }
    }
}

$shark = pgShark->new(
    {   'procs'    => \%procs,
        'host'     => $args{'host'},
        'port'     => $args{'port'},
        'protocol' => $args{'protocol'},
        'debug'    => $args{'debug'}
    }
);

# open a live capture on given interface
if ( $args{'interface'} ne '' ) {
    my $err = '';

    ( $shark->live( $args{'interface'}, \$err ) == 0 )
        or die("Can not open interface '$args{'interface'}':\n$err");
}

# we have no interface to listen on,
# either open given pcap file or start reading from stdin
else {
    my $err = '';

    # read from stdin if no pcap file given
    $args{'read'}[0] = '-' if scalar @{ $args{'read'} } == 0;

    foreach my $f ( @{ $args{'read'} } ) {

        pgShark::dprint 1 => "Reading file $f...";

        ( $shark->open( $f, \$err ) == 0 )
            or die("Can not read from file '$f':\n$err");

        $shark->process_all();

        $shark->close();
    }
}

# on live capture, a ctrl-C interrupt the loop
$shark->process_all();

$shark->close();

exit 0;

__END__

=head1 NAME

pgs-debug - Prints out properties of pgsql messages found in a pcap dump.

Belongs to the pgShark scripts collection.

=head1 SYNOPSIS

=over 2

=item pgs-debug --help

=item pgs-debug [-2|-3] [--read file|--interface DEV] [--host IPADDR] [--port PORT]

=back

=head1 DESCRIPTION

B<pgs-debug> outputs the PostgreSQL messages in human readable format. Useful to analyze what is in a network
dump before using pgshark on some other duties. The network dump could be live or from a pcap file (using tcpdump for instance).

=over 2

=item B<--help>

Show this help message and exit.

=item B<-2>

Dissect the pcap flow using PostgreSQL v2.0 protocol.

=item B<-3>

Dissect the pcap flow using PostgreSQL v3.0 protocol. This is the default.

=item B<-h>, B<--host> <ip address>

Gives the IP address of the PostgreSQL server. By default, set to 127.0.0.1.

=item B<-p>, B<--port> <port>

Gives the port the PostgreSQL backend is listening on. By default, set to 5432

=item B<-i>, B<--interface> <interface name>

Capture PostgreSQL traffic directly from the given network interface. Conflict with B<--read>.
By default, B<pgs-debug> will read from stdin if neither B<--read> or B<--interface> are given.

=item B<-r>, B<--read> <path to file>

Read PostgreSQL traffic from given pcap file. Conflict with B<--interface>.
By default, B<pgs-debug> will read from stdin if neither B<--read> or B<--interface> are given.

=item B<--exclude> <message type>

This argument allows you to exclude some message base on their name. You can
give as many C<--exclude> as needed.

You will find the list of the available messages here:
L<http://www.postgresql.org/docs/current/static/protocol-message-formats.html>

See C<--include> as well. If a message type is given in both exclude and include
arguments, it is excluded.

=item B<--include> <message type>

This argument allows you to select what messages you want to catch, base on
their name. any other message type will be ignored. You can give as many
C<--include> as needed.

You will find the list of the available messages here:
L<http://www.postgresql.org/docs/current/static/protocol-message-formats.html>

See C<--exclude> as well. If a message type is given in both exclude and include
arguments, it is excluded.

=item B<--format> <format string>

This parameter allows you to format the output the way you want. % characters
begin "escape sequences" that are replaced with status information as outlined
below. Unrecognized escapes are ignored. Other characters are copied straight
to the log line. Some escapes might not be available depending on the context.

The default format is the following:

  Packet: t=%T, session=%k\nPGSQL: type=%M, %>\n%@\n

=over 3

=item B<%a>
Application name. Known if set by the application on login and if the startup
message has been captured.

=item B<%d>
Database name. Known if the startup message has been captured.

=item B<%H>
Source host

=item B<%h>
Destination host

=item B<%k>
Hash key of the session (src ip and src port concatenated)

=item B<%L>
Lenght of the message

=item B<%P>
The network packet number

=item B<%R>
Source host and port

=item B<%r>
Destination host and port

=item B<%T>
Raw timestamp

=item B<%t>
Human readable timestamp

=item B<%u>
User name. Known if the startup message has been captured.

=item B<< %> >>
Direction of the message, either C<< B -> F >> (Backend to Frontend) or
C<< F -> B >> (Frontend to Backend).

=item B<%@>
The debug datas related to the current message.

=back

=back

=head1 EXAMPLE

Listening on interface C<eth0>, debugging PostgreSQL messages with a cluster reachable on '192.168.42.5':

  pgs-debug --host 192.168.42.5 -i eth0

Listening on interface C<lo>, cluster available from '127.0.0.1', only show AuthenticationOk
and PasswordMessage messages:

  pgs-debug --host 127.0.0.1 -i lo --include AuthenticationOk --include PasswordMessage

To have a terse output, you can use the following format:

  pgs-debug -p 5494 -h 127.0.0.1 -i lo --format "%t [%k] %>: %M"

The following example shows how to work with a server that is B<NOT> listening on localhost and the default 5432 port. (1)
dump from C<eth0> every packets from/to the port 5490. C<-s 0> is requiered on some older version of tcpdump to dump
the whole packets. (2) Here C<--host> and C<--port> are B<important> to notify pgshark who is the PostgreSQL server in the network dump and its working port.

=over 2

  tcpdump -i eth0 -w /tmp/tcp_5490.pcap -s 0 'tcp and port 5490' (1)

  pgs-debug --port 5490 --host 192.168.42.5 -r /tmp/tcp_5490.pcap (2)

=back

=head1 AUTHORS

Jehan-Guillaume (ioguix) de Rorthais <jgdr@dalibo.com>.

Guillaume Lelarge <guillaume.lelarge@dalibo.com>.

Dalibo's team.

http://www.dalibo.org

=head1 SEE ALSO

The pgShark wiki on github : https://github.com/dalibo/pgshark/wiki

=head1 LICENSING

This program is open source, licensed under the simplified BSD license. For license terms, see the LICENSE provided
with the sources.

=cut
